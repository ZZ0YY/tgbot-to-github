# /.github/workflows/create_release_asset.yml

name: 通过用户 API 下载并上传大文件
on:
  repository_dispatch: { types: [upload_file_from_user_api] }
  workflow_dispatch:
jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 允许创建/更新 release
    steps:
      - name: 1. 检出代码
        uses: actions/checkout@v4
      - name: 2. 设置 Python 环境
        uses: actions/setup-python@v4
        with: { python-version: '3.11' }
      - name: 3. 安装 Telethon 依赖
        run: python -m pip install telethon
      - name: 4. 通过用户 API 下载文件
        id: download
        timeout-minutes: 120
        env:
          TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
          TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
          TELEGRAM_SESSION_STRING: ${{ secrets.TELEGRAM_SESSION_STRING }}
          CHAT_ID: ${{ github.event.client_payload.chat_id }}
          # --- 修改: 变量名从 MESSAGE_ID 改为 MESSAGE_IDS ---
          MESSAGE_IDS: ${{ github.event.client_payload.message_ids }}
        run: python -u download_script.py
      - name: 5. 准备 Release 信息
        id: release_info
        run: echo "release_tag=daily-backup-$(TZ='Asia/Shanghai' date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      
      # --- 修改: 步骤 6, 7, 8 合并并简化为一个使用 gh CLI 的步骤 ---
      - name: 6. 创建或获取 Release 并上传所有资产
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # 从上一步获取下载好的文件路径和原始文件名
          ASSET_PATHS: ${{ steps.download.outputs.file_paths }}
          ASSET_NAMES: ${{ steps.download.outputs.original_names }}
          RELEASE_TAG: ${{ steps.release_info.outputs.release_tag }}
        run: |
          # 确保 release 存在，如果不存在则创建它。`--generate-notes` 可以自动生成一些发布说明。
          gh release create "$RELEASE_TAG" \
            --repo "$GITHUB_REPOSITORY" \
            --title "每日备份 - $RELEASE_TAG" \
            --notes "通过机器人自动备份的大文件。" \
            --prerelease=false \
            --draft=false || echo "Release $RELEASE_TAG 已存在，将直接上传文件。"
          
          echo "准备上传资产..."
          
          # 将多行字符串转换为 bash 数组
          mapfile -t paths < <(echo "$ASSET_PATHS")
          mapfile -t names < <(echo "$ASSET_NAMES")
          
          # 循环上传每一个文件
          for i in "${!paths[@]}"; do
            path="${paths[$i]}"
            name="${names[$i]}"
            if [[ -f "$path" ]]; then
              echo "正在上传: '$name' (来自路径: '$path') 到 Release '$RELEASE_TAG'..."
              gh release upload "$RELEASE_TAG" "$path" --repo "$GITHUB_REPOSITORY" --clobber
              echo "上传 '$name' 成功。"
            else
              echo "警告: 文件 '$path' 不存在，跳过上传。"
            fi
          done

          echo "所有文件上传完毕。"