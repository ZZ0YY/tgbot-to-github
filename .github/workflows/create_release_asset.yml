# /.github/workflows/create_release_asset.yml

name: 通过用户 API 下载并上传大文件
on:
  repository_dispatch: { types: [upload_file_from_user_api] }
  workflow_dispatch:
jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions: { contents: write }
    steps:
      - { name: 1. 检出代码, uses: actions/checkout@v4 }
      - { name: 2. 设置 Python 环境, uses: actions/setup-python@v4, with: { python-version: '3.11' } }
      - { name: 3. 安装 Telethon 依赖, run: python -m pip install telethon }
      - name: 4. 通过用户 API 下载文件
        id: download
        timeout-minutes: 120
        env:
          TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
          TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
          TELEGRAM_SESSION_STRING: ${{ secrets.TELEGRAM_SESSION_STRING }}
          CHAT_ID: ${{ github.event.client_payload.chat_id }}
          MESSAGE_ID: ${{ github.event.client_payload.message_id }}
        run: python -u download_script.py
      - name: 5. 准备 Release 信息
        id: release_info
        run: echo "release_tag=daily-backup-$(TZ='Asia/Shanghai' date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      - name: 6. 确保 Release 存在并获取上传 URL
        id: create_release
        uses: actions/create-release@v1
        env: { GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}' }
        with:
          tag_name: ${{ steps.release_info.outputs.release_tag }}
          release_name: "每日备份 - ${{ steps.release_info.outputs.release_tag }}"
          body: "通过机器人自动备份的大文件。"
        continue-on-error: true
      - name: 7. 获取已存在的 Release 的上传 URL
        if: steps.create_release.outcome == 'failure'
        id: get_existing_release
        uses: actions/github-script@v7
        with:
          script: |
            const release = await github.rest.repos.getReleaseByTag({ owner: context.repo.owner, repo: context.repo.repo, tag: '${{ steps.release_info.outputs.release_tag }}' });
            core.setOutput('upload_url', release.data.upload_url);
      - name: 8. 上传文件到 Release
        uses: actions/upload-release-asset@v1
        env: { GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}' }
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url || steps.get_existing_release.outputs.upload_url }}
          asset_path: ${{ steps.download.outputs.file_path }}
          asset_name: ${{ steps.download.outputs.original_name }}
          asset_content_type: application/octet-stream