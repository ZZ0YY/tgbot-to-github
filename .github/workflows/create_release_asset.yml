# /.github/workflows/create_release_asset.yml

name: 通过用户 API 下载并上传大文件
on:
  repository_dispatch: { types: [upload_file_from_user_api] }
  workflow_dispatch:
jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 允许创建/更新 release
    steps:
      - name: 1. 检出代码
        uses: actions/checkout@v4
      - name: 2. 设置 Python 环境
        uses: actions/setup-python@v4
        with: { python-version: '3.11' }
      - name: 3. 安装 Telethon 依赖
        run: python -m pip install telethon
      - name: 4. 通过用户 API 下载文件
        id: download
        timeout-minutes: 120
        env:
          TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
          TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
          TELEGRAM_SESSION_STRING: ${{ secrets.TELEGRAM_SESSION_STRING }}
          CHAT_ID: ${{ github.event.client_payload.chat_id }}
          MESSAGE_IDS: ${{ github.event.client_payload.message_ids }}
        run: python -u download_script.py
      - name: 5. 准备 Release 信息
        id: release_info
        run: echo "release_tag=daily-backup-$(TZ='Asia/Shanghai' date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      # --- 修改: 使用 softprops/action-gh-release 来创建发行版并上传文件 ---
      - name: 6. 创建 Release 并上传资产
        uses: softprops/action-gh-release@v2
        with:
          # 从上一步获取要上传的文件的路径
          # 这个 Action 支持多行字符串，正好匹配您 download_script.py 的输出
          files: ${{ steps.download.outputs.file_paths }}
          
          # 使用第 5 步生成的标签名
          tag_name: ${{ steps.release_info.outputs.release_tag }}
          
          # 设置 Release 的标题
          name: "每日备份 - ${{ steps.release_info.outputs.release_tag }}"
          
          # 设置 Release 的正文内容
          body: "通过机器人自动备份的大文件。"
          
          # 设置为非草稿、非预发布版本
          draft: false
          prerelease: false