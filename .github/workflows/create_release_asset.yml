# .github/workflows/create_release_asset.yml

name: Create Release Asset from Telegram File

# 触发器：当收到 repository_dispatch 事件，且 event_type 为 'upload_file_to_release' 时触发
on:
  repository_dispatch:
    types: [upload_file_to_release]

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 必须设置！授予 workflow 创建/更新 Release 和上传 Asset 的权限

    steps:
      # 步骤 1: 检出代码，虽然这个 workflow 不直接使用仓库代码，但这是一个好习惯
      - name: Checkout code
        uses: actions/checkout@v4

      # 步骤 2 (可选但推荐): 打印从机器人Webhook收到的数据，方便调试
      - name: 'Debug: Print client payload'
        run: echo "${{ toJSON(github.event.client_payload) }}"

      # 步骤 3: 设置 Python 环境，用于运行下载脚本
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      # 步骤 4: 安装 Python 依赖库
      - name: Install dependencies
        run: python -m pip install requests

      # 步骤 5: 运行内联的 Python 脚本，从 Telegram 下载文件
      - name: Download file from Telegram
        id: download
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          FILE_ID: ${{ github.event.client_payload.file_id }}
          FILE_NAME: ${{ github.event.client_payload.file_name }}
        run: |
          import os
          import requests
          import sys

          BOT_TOKEN = os.getenv('BOT_TOKEN')
          FILE_ID = os.getenv('FILE_ID')
          FILE_NAME = os.getenv('FILE_NAME')

          if not all([BOT_TOKEN, FILE_ID, FILE_NAME]):
              print("Error: Missing one or more environment variables (BOT_TOKEN, FILE_ID, FILE_NAME).")
              sys.exit(1)

          # 1. 使用 getFile 方法获取文件的 file_path
          get_file_url = f"https://api.telegram.org/bot{BOT_TOKEN}/getFile"
          response = requests.get(get_file_url, params={'file_id': FILE_ID})
          
          if response.status_code != 200 or not response.json().get('ok'):
              print(f"Error getting file info from Telegram: {response.status_code} - {response.text}")
              sys.exit(1)

          file_path = response.json()['result']['file_path']
          
          # 2. 构建完整的文件下载 URL
          download_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"
          
          # 3. 下载文件
          print(f"Downloading '{FILE_NAME}' from Telegram...")
          with requests.get(download_url, stream=True) as r:
              r.raise_for_status()
              with open(FILE_NAME, 'wb') as f:
                  for chunk in r.iter_content(chunk_size=8192):
                      f.write(chunk)
          
          print(f"File downloaded successfully and saved as '{FILE_NAME}'")
          
          # 4. 将下载的文件名输出给后续步骤使用
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              print(f"downloaded_file_name={FILE_NAME}", file=f)

      # 步骤 6: 获取当前日期 (YYYY-MM-DD)，用于生成 Release 标签
      - name: Get current date
        id: date
        run: echo "today=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      # 步骤 7: 创建或更新 Release，并上传文件作为 Asset
      - name: Create or Update Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          # 要上传的文件
          files: ${{ steps.download.outputs.downloaded_file_name }}
          
          # 使用日期作为标签，实现按天聚合
          tag_name: "daily-backup-${{ steps.date.outputs.today }}"
          
          # Release 的标题
          name: "Daily Backup - ${{ steps.date.outputs.today }}"
          
          # Release 的描述内容
          body: |
            Files automatically uploaded from Telegram on ${{ steps.date.outputs.today }}.
            This release is automatically managed.
