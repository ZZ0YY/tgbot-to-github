# /.github/workflows/create_release_asset.yml

name: 通过 Rclone 创建 Release Asset (Docker 版)

on:
  repository_dispatch:
    types: [upload_file_to_release]
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 1. 检出代码
        uses: actions/checkout@v4

      - name: 2. 设置 Python 环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: 3. 安装 Python 依赖
        run: python -m pip install requests

      - name: 4. 从 Telegram 下载文件
        timeout-minutes: 60
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          FILE_ID: ${{ github.event.client_payload.file_id }}
          ORIGINAL_FILE_NAME_B64: ${{ github.event.client_payload.original_file_name_b64 }}
        run: python download_script.py

      - name: 5. 获取用于 Release 的日期标签
        id: date
        run: echo "today=$(TZ='Asia/Shanghai' date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      # --- 核心修改：使用 Rclone 官方 Docker 镜像执行同步 ---
      - name: 6. 同步文件到 GitHub Releases (via Rclone Docker)
        timeout-minutes: 60
        env:
          # 将 Token 作为环境变量传递给 Docker 容器
          RCLONE_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 定义 shell 变量，方便阅读
          RELEASE_TAG="daily-backup-${{ steps.date.outputs.today }}"
          REMOTE_PATH="github:${{ github.repository }}@$RELEASE_TAG"

          # 运行 Rclone 官方 Docker 镜像
          # docker run [options] <image> [command]
          docker run --rm \
            -v ./downloads:/data/downloads \
            -v /tmp/rclone_config:/config/rclone \
            -e RCLONE_CONFIG_GITHUB_TYPE=github \
            -e RCLONE_CONFIG_GITHUB_TOKEN \
            rclone/rclone:latest \
            copy /data/downloads "$REMOTE_PATH" --progress --no-traverse -vv