# /.github/workflows/create_release_asset.yml

name: 通过 Rclone 创建 Release Asset (Bash printf 版)

on:
  repository_dispatch:
    types: [upload_file_to_release]
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 1. 检出代码
        uses: actions/checkout@v4

      - name: 2. 设置 Python 环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: 3. 安装 Python 依赖
        run: python -m pip install requests

      - name: 4. 从 Telegram 下载文件
        timeout-minutes: 60
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          FILE_ID: ${{ github.event.client_payload.file_id }}
          ORIGINAL_FILE_NAME_B64: ${{ github.event.client_payload.original_file_name_b64 }}
        run: python download_script.py

      - name: 5. 安装 Rclone
        run: curl https://rclone.org/install.sh | sudo bash

      # --- 核心修改：使用 printf 保证配置文件内容的纯净性 ---
      - name: 6. 动态配置 Rclone (使用 printf)
        env:
          RCLONE_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CONFIG_DIR=~/.config/rclone
          CONFIG_FILE_PATH="$CONFIG_DIR/rclone.conf"
          mkdir -p "$CONFIG_DIR"
          
          # 使用 printf 来创建配置文件，这是最可靠的方式
          # %s 会被后面的参数替换，\n 是换行符
          printf "[github]\ntype = github\ntoken = %s\n" "$RCLONE_GITHUB_TOKEN" > "$CONFIG_FILE_PATH"

          echo "--- Rclone 配置验证 ---"
          echo "配置文件的内容是:"
          cat "$CONFIG_FILE_PATH"
          echo "Rclone 识别到的远程盘是:"
          rclone listremotes
          echo "-----------------------"

      - name: 7. 获取用于 Release 的日期标签
        id: date
        run: echo "today=$(TZ='Asia/Shanghai' date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
        
      - name: 8. 同步文件到 GitHub Releases
        timeout-minutes: 60
        run: |
          RELEASE_TAG="daily-backup-${{ steps.date.outputs.today }}"
          REMOTE_PATH="github:${{ github.repository }}@$RELEASE_TAG"
          
          echo "准备将 './downloads' 目录同步到远程: ${REMOTE_PATH}"
          
          # 不再需要 --config 参数，因为我们已经确认了默认路径
          rclone copy ./downloads "${REMOTE_PATH}" --progress --no-traverse -vv