# /.github/workflows/create_release_asset.yml

name: 通过官方 Action 上传 Release Asset (最终修正版)

on:
  repository_dispatch:
    types: [upload_file_to_release]
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 1. 检出代码
        uses: actions/checkout@v4

      - name: 2. 设置 Python 环境和依赖
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - run: python -m pip install requests

      - name: 3. 从 Telegram 下载文件
        id: download
        timeout-minutes: 60
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          FILE_ID: ${{ github.event.client_payload.file_id }}
          ORIGINAL_FILE_NAME_B64: ${{ github.event.client_payload.original_file_name_b64 }}
        run: python download_script.py

      - name: 4. 准备 Release 信息
        id: release_info
        run: |
          RELEASE_TAG="daily-backup-$(TZ='Asia/Shanghai' date +'%Y-%m-%d')"
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT

      - name: 5. 确保 Release 存在并获取上传 URL
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release_info.outputs.release_tag }}
          release_name: "每日备份 - ${{ steps.release_info.outputs.release_tag }}"
          body: "通过机器人自动备份的文件。"
          draft: false
          prerelease: false
        continue-on-error: true

      - name: 6. 获取已存在的 Release 的上传 URL (如果上一步跳过)
        if: steps.create_release.outcome == 'failure'
        id: get_existing_release
        uses: actions/github-script@v7
        with:
          script: |
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ steps.release_info.outputs.release_tag }}'
            });
            core.setOutput('upload_url', release.data.upload_url);
        
      # --- 全新的、至关重要的 URL 清理步骤 ---
      - name: 7. 准备上传变量 (清理 URL)
        id: upload_vars
        run: |
          RAW_UPLOAD_URL="${{ steps.create_release.outputs.upload_url || steps.get_existing_release.outputs.upload_url }}"
          # 使用 Bash 字符串替换，移除 URL 末尾的模板部分
          CLEAN_UPLOAD_URL=${RAW_UPLOAD_URL/\{?name,label\}/}
          echo "upload_url=$CLEAN_UPLOAD_URL" >> $GITHUB_OUTPUT
      # ----------------------------------------

      - name: 8. 上传文件到 Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # 使用上一步清理过的 URL
          upload_url: ${{ steps.upload_vars.outputs.upload_url }}
          asset_path: ${{ steps.download.outputs.file_path }}
          asset_name: ${{ steps.download.outputs.original_name }}
          asset_content_type: application/octet-stream