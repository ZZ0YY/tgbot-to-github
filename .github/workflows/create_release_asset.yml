# /.github/workflows/create_release_asset.yml

name: 通过 GitHub CLI (gh) 创建 Release Asset

on:
  repository_dispatch:
    types: [upload_file_to_release]
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    # gh 命令需要 contents: write 来创建和上传 Release
    # 需要 issues: write 来更新 Release body (可选，但推荐)
    permissions:
      contents: write
      issues: write

    steps:
      - name: 1. 检出代码
        uses: actions/checkout@v4

      - name: 2. 设置 Python 环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: 3. 安装 Python 依赖
        run: python -m pip install requests

      - name: 4. 从 Telegram 下载文件
        timeout-minutes: 60
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          FILE_ID: ${{ github.event.client_payload.file_id }}
          ORIGINAL_FILE_NAME_B64: ${{ github.event.client_payload.original_file_name_b64 }}
        run: python download_script.py

      - name: 5. 获取用于 Release 的日期标签
        id: date
        run: echo "today=$(TZ='Asia/Shanghai' date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
        
      # --- 核心修改：使用 GitHub CLI (gh) ---
      - name: 6. 创建或找到 Release
        id: create_release
        env:
          # gh 命令会自动使用这个 Token 进行认证
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_TAG="daily-backup-${{ steps.date.outputs.today }}"
          
          # 尝试查看 Release 是否已存在
          # 如果不存在，`gh release view` 会失败，这正是我们想要的
          gh release view "$RELEASE_TAG" > /dev/null 2>&1 && IS_EXIST=true || IS_EXIST=false
          
          if [ "$IS_EXIST" = "true" ]; then
            echo "Release '$RELEASE_TAG' already exists. Will upload to it."
          else
            echo "Release '$RELEASE_TAG' does not exist. Creating it..."
            # --generate-notes 会自动生成发布说明
            gh release create "$RELEASE_TAG" --title "Daily Backup - ${{ steps.date.outputs.today }}" --notes "Automated daily backup of files."
          fi
          # 将标签名传递给下一步
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT

      - name: 7. 上传文件到 Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_TAG="${{ steps.create_release.outputs.release_tag }}"
          echo "Uploading all files from './downloads' to Release '$RELEASE_TAG'..."
          
          # gh release upload 可以接受一个目录，并自动上传其中的所有文件
          # --clobber 参数表示如果已存在同名文件，则覆盖它
          gh release upload "$RELEASE_TAG" ./downloads/* --clobber