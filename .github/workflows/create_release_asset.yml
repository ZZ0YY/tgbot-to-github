# /.github/workflows/create_release_asset.yml

name: 通过 cURL 和 GitHub API 直接上传 Release Asset

on:
  repository_dispatch:
    types: [upload_file_to_release]
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 1. 检出代码
        uses: actions/checkout@v4

      - name: 2. 设置 Python 环境和依赖
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - run: python -m pip install requests

      - name: 3. 从 Telegram 下载文件
        id: download
        timeout-minutes: 60
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          FILE_ID: ${{ github.event.client_payload.file_id }}
          ORIGINAL_FILE_NAME_B64: ${{ github.event.client_payload.original_file_name_b64 }}
        run: python download_script.py

      - name: 4. 准备 Release 信息
        id: release_info
        run: |
          RELEASE_TAG="daily-backup-$(TZ='Asia/Shanghai' date +'%Y-%m-%d')"
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT

      # --- 核心修改：分离“创建/获取”和“上传”步骤 ---
      - name: 5. 确保 Release 存在并获取上传 URL
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release_info.outputs.release_tag }}
          release_name: "每日备份 - ${{ steps.release_info.outputs.release_tag }}"
          body: "通过机器人自动备份的文件。"
          draft: false
          prerelease: false
        # --- 关键！让这一步在“已存在”错误时不要失败 ---
        continue-on-error: true

      - name: 6. 获取已存在的 Release 的上传 URL (如果上一步是跳过的)
        # 只有当上一步因为 'already_exists' 而被跳过时，这一步才会运行
        if: steps.create_release.outcome == 'failure'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 使用 gh cli 获取已存在的 release 的 upload_url
          UPLOAD_URL=$(gh release view "${{ steps.release_info.outputs.release_tag }}" --json uploadUrl -q .uploadUrl)
          echo "UPLOAD_URL=$UPLOAD_URL" >> $GITHUB_OUTPUT
        id: get_existing_release

      - name: 7. 使用 cURL 上传文件
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # --- 关键！根据上一步的结果，决定使用哪个 upload_url ---
          # 如果第 5 步成功了，就用它的输出
          # 如果第 5 步失败了（因为已存在），就用第 6 步的输出
          UPLOAD_URL="${{ steps.create_release.outputs.upload_url || steps.get_existing_release.outputs.UPLOAD_URL }}"
          FILE_PATH="${{ steps.download.outputs.file_path }}"
          ORIGINAL_NAME="${{ steps.download.outputs.original_name }}"
          
          # 使用 jq 进行 URL 编码，这是最可靠的方式
          # 如果 runner 上没有 jq, 我们需要先安装
          sudo apt-get update && sudo apt-get install -y jq
          URL_ENCODED_NAME=$(jq -sRr @uri <<< "$ORIGINAL_NAME")
          
          echo "Uploading file '$FILE_PATH' to Release '${{ steps.release_info.outputs.release_tag }}'..."
          
          curl -sS \
            --request POST \
            --url "$UPLOAD_URL?name=$URL_ENCODED_NAME" \
            --header "Authorization: token $GITHUB_TOKEN" \
            --header "Content-Type: application/octet-stream" \
            --data-binary "@$FILE_PATH"